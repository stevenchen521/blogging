{
  
    
        "post0": {
            "title": "Setup MongoDB Atlas Database",
            "content": "MongoDB is a rich document-oriented NoSQL database. I spent some time diving into it. My philosophy to learn a new tech is always practicing. Therefore, here I share my gained knowledge in the form of the exercise. . Enough of the talk, let’s start! . Requirement . I am building some personal application with Python. The requirement is to create or update the MongoDB collection(or table in the relational database) with rows in DataFrame. More specifically, for the rows that don&#39;t exist we do the creation based on the keys in the DataFrame. Otherwise the update should be performed. . def show_collection(collection): display(DataFrame([row for row in collection.find()])) . DB_NAME = &#39;test&#39; COLLECTION_NAME = &#39;employee&#39; . client = MongoClient(CONN_STR) client.drop_database(DB_NAME) db = client[DB_NAME] # switch database collection = db[COLLECTION_NAME] # get the collection . Prepare a test DataFrame df_emplyee that contains three columns . name | age | sex | . df_emplyee . name age sex . 0 user1 | 25 | male | . 1 user2 | 55 | male | . 2 user3 | 43 | male | . collection.insert_many(df_emplyee.to_dict(&quot;records&quot;)) show_collection(collection) . _id name age sex . 0 61b0d067650e3488de556924 | user1 | 25 | male | . 1 61b0d067650e3488de556925 | user2 | 55 | male | . 2 61b0d067650e3488de556926 | user3 | 43 | male | . Update &amp; upsert . Change the age of user1 to 32 . myquery = { &quot;name&quot;: &quot;user1&quot; } newvalues = { &quot;$set&quot;: { &quot;age&quot;: &quot;32&quot; }, &quot;$currentDate&quot;: {&quot;lastModifiedAt&quot;: { &quot;$type&quot;: &quot;date&quot; }} } collection.update_one(myquery, newvalues) . &lt;pymongo.results.UpdateResult at 0x7f9972e869c0&gt; . show_collection(collection) . _id name age sex lastModifiedAt . 0 61b0d067650e3488de556924 | user1 | 32 | male | 2021-12-08 15:33:59.537 | . 1 61b0d067650e3488de556925 | user2 | 55 | male | NaT | . 2 61b0d067650e3488de556926 | user3 | 43 | male | NaT | . collection.update_one({&quot;name&quot;:&quot;user1&quot;}, {&quot;$set&quot;:{&quot;age&quot;:32}, &quot;$currentDate&quot;: {&quot;lastModifiedAt&quot;: { &quot;$type&quot;: &quot;date&quot; }} }, upsert=True) show_collection(collection) . _id name age sex lastModifiedAt . 0 61b0d067650e3488de556924 | user1 | 32 | male | 2021-12-08 15:33:59.777 | . 1 61b0d067650e3488de556925 | user2 | 55 | male | NaT | . 2 61b0d067650e3488de556926 | user3 | 43 | male | NaT | . collection.update_one({&quot;name&quot;:&quot;user4&quot;}, {&quot;$set&quot;:{&quot;age&quot;:32}, &quot;$setOnInsert&quot;:{&quot;sex&quot;:&quot;female&quot;}, &quot;$currentDate&quot;:{&quot;lastModifiedAt&quot;: { &quot;$type&quot;: &quot;date&quot; }} }, upsert=True) show_collection(collection) . _id name age sex lastModifiedAt . 0 61b0d067650e3488de556924 | user1 | 32 | male | 2021-12-08 15:33:59.777 | . 1 61b0d067650e3488de556925 | user2 | 55 | male | NaT | . 2 61b0d067650e3488de556926 | user3 | 43 | male | NaT | . 3 61b0d06712c824e29ed6221a | user4 | 32 | female | 2021-12-08 15:33:59.989 | . Bulk update . df_emplyee = df_emplyee.append({&#39;name&#39;:&#39;user5&#39;,&#39;age&#39;: 65, &#39;sex&#39;:&#39;male&#39;},ignore_index=True) updates = [] df_emplyee.apply( lambda row: updates.append( UpdateOne( {&quot;name&quot;: row.get(&quot;name&quot;)}, {&quot;$set&quot;: row.to_dict(), &quot;$currentDate&quot;:{&quot;lastModifiedAt&quot;: { &quot;$type&quot;: &quot;date&quot; }} }, upsert=True )), axis=1) collection.bulk_write(updates) show_collection(collection) . _id name age sex lastModifiedAt . 0 61b0d067650e3488de556924 | user1 | 25 | male | 2021-12-08 15:34:00.236 | . 1 61b0d067650e3488de556925 | user2 | 55 | male | 2021-12-08 15:34:00.237 | . 2 61b0d067650e3488de556926 | user3 | 43 | male | 2021-12-08 15:34:00.237 | . 3 61b0d06712c824e29ed6221a | user4 | 32 | female | 2021-12-08 15:33:59.989 | . 4 61b0d06812c824e29ed6223b | user5 | 65 | male | 2021-12-08 15:34:00.237 | . DataFrame upsert . def df_upsert(df:DataFrame, collection, keys:[]): def row_query(row, keys ): res = {} for key in keys: res[key] = row.get(key) return res updates = [] df_emplyee.apply( lambda row: updates.append( UpdateOne( row_query(row, keys), {&#39;$set&#39;: row.to_dict(), &quot;$currentDate&quot;:{&quot;lastModifiedAt&quot;: { &quot;$type&quot;: &quot;date&quot; }} }, upsert=True)), axis=1 ) collection.bulk_write(updates) . show_collection(collection) . _id name age sex lastModifiedAt . 0 61b0d067650e3488de556924 | user1 | 25 | male | 2021-12-08 15:34:00.236 | . 1 61b0d067650e3488de556925 | user2 | 55 | male | 2021-12-08 15:34:00.237 | . 2 61b0d067650e3488de556926 | user3 | 43 | male | 2021-12-08 15:34:00.237 | . 3 61b0d06712c824e29ed6221a | user4 | 32 | female | 2021-12-08 15:33:59.989 | . 4 61b0d06812c824e29ed6223b | user5 | 65 | male | 2021-12-08 15:34:00.237 | . df_emplyee = df_emplyee.append({&#39;name&#39;:&#39;user6&#39;,&#39;age&#39;: 37, &#39;sex&#39;:&#39;female&#39;},ignore_index=True) df_emplyee . name age sex . 0 user1 | 25 | male | . 1 user2 | 55 | male | . 2 user3 | 43 | male | . 3 user5 | 65 | male | . 4 user6 | 37 | female | . df_upsert(df_emplyee, collection, [&#39;name&#39;]) show_collection(collection) . _id name age sex lastModifiedAt . 0 61b0d067650e3488de556924 | user1 | 25 | male | 2021-12-08 15:34:00.609 | . 1 61b0d067650e3488de556925 | user2 | 55 | male | 2021-12-08 15:34:00.610 | . 2 61b0d067650e3488de556926 | user3 | 43 | male | 2021-12-08 15:34:00.610 | . 3 61b0d06712c824e29ed6221a | user4 | 32 | female | 2021-12-08 15:33:59.989 | . 4 61b0d06812c824e29ed6223b | user5 | 65 | male | 2021-12-08 15:34:00.610 | . 5 61b0d06812c824e29ed62261 | user6 | 37 | female | 2021-12-08 15:34:00.610 | .",
            "url": "https://stevenchen521.github.io/blogging/2021/12/09/mogodb_01.html",
            "relUrl": "/2021/12/09/mogodb_01.html",
            "date": " • Dec 9, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://stevenchen521.github.io/blogging/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://stevenchen521.github.io/blogging/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stevenchen521.github.io/blogging/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
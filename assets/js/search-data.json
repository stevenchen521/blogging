{
  
    
        "post0": {
            "title": "Upsert DataFrame to MongoDB Step by Step",
            "content": "Requirement . I am building some personal application with Python. The requirement is to create or update the MongoDB collection(or table in the relational database) with rows in DataFrame. More specifically, for the rows that don&#39;t exist we do the creation based on the keys in the DataFrame. Otherwise the update should be performed. . def show_collection(collection): display(DataFrame([row for row in collection.find()])) . Setup MongoDB Atlas Database . Get a free cloud based MongoDB database here. . Connect to the database and create the test database . DB_NAME = &#39;test&#39; COLLECTION_NAME = &#39;employee&#39; . client = MongoClient(CONN_STR) client.drop_database(DB_NAME) db = client[DB_NAME] # switch database collection = db[COLLECTION_NAME] # get the collection . Prepare a test DataFrame df_emplyee that contains three columns . name | age | sex | . df_emplyee . name age sex . 0 user1 | 25 | male | . 1 user2 | 55 | male | . 2 user3 | 43 | male | . collection.insert_many(df_emplyee.to_dict(&quot;records&quot;)) show_collection(collection) . _id name age sex . 0 61b217d096bc99f7804c7a01 | user1 | 25 | male | . 1 61b217d096bc99f7804c7a02 | user2 | 55 | male | . 2 61b217d096bc99f7804c7a03 | user3 | 43 | male | . Update &amp; upsert . Change the age of user1 to 32 . myquery = { &quot;name&quot;: &quot;user1&quot; } newvalues = { &quot;$set&quot;: { &quot;age&quot;: &quot;32&quot; }, &quot;$currentDate&quot;: {&quot;lastModifiedAt&quot;: { &quot;$type&quot;: &quot;date&quot; }} } collection.update_one(myquery, newvalues) . &lt;pymongo.results.UpdateResult at 0x7f4b73fe9340&gt; . show_collection(collection) . _id name age sex lastModifiedAt . 0 61b217d096bc99f7804c7a01 | user1 | 32 | male | 2021-12-09 14:50:57.251 | . 1 61b217d096bc99f7804c7a02 | user2 | 55 | male | NaT | . 2 61b217d096bc99f7804c7a03 | user3 | 43 | male | NaT | . collection.update_one({&quot;name&quot;:&quot;user1&quot;}, {&quot;$set&quot;:{&quot;age&quot;:32}, &quot;$currentDate&quot;: {&quot;lastModifiedAt&quot;: { &quot;$type&quot;: &quot;date&quot; }} }, upsert=True) show_collection(collection) . _id name age sex lastModifiedAt . 0 61b217d096bc99f7804c7a01 | user1 | 32 | male | 2021-12-09 14:50:57.655 | . 1 61b217d096bc99f7804c7a02 | user2 | 55 | male | NaT | . 2 61b217d096bc99f7804c7a03 | user3 | 43 | male | NaT | . collection.update_one({&quot;name&quot;:&quot;user4&quot;}, {&quot;$set&quot;:{&quot;age&quot;:32}, &quot;$setOnInsert&quot;:{&quot;sex&quot;:&quot;female&quot;}, &quot;$currentDate&quot;:{&quot;lastModifiedAt&quot;: { &quot;$type&quot;: &quot;date&quot; }} }, upsert=True) show_collection(collection) . _id name age sex lastModifiedAt . 0 61b217d096bc99f7804c7a01 | user1 | 32 | male | 2021-12-09 14:50:57.655 | . 1 61b217d096bc99f7804c7a02 | user2 | 55 | male | NaT | . 2 61b217d096bc99f7804c7a03 | user3 | 43 | male | NaT | . 3 61b217d212c824e29e2d3fbc | user4 | 32 | female | 2021-12-09 14:50:58.072 | . Bulk update . df_emplyee = df_emplyee.append({&#39;name&#39;:&#39;user5&#39;,&#39;age&#39;: 65, &#39;sex&#39;:&#39;male&#39;},ignore_index=True) updates = [] df_emplyee.apply( lambda row: updates.append( UpdateOne( {&quot;name&quot;: row.get(&quot;name&quot;)}, {&quot;$set&quot;: row.to_dict(), &quot;$currentDate&quot;:{&quot;lastModifiedAt&quot;: { &quot;$type&quot;: &quot;date&quot; }} }, upsert=True )), axis=1) collection.bulk_write(updates) show_collection(collection) . _id name age sex lastModifiedAt . 0 61b217d096bc99f7804c7a01 | user1 | 25 | male | 2021-12-09 14:50:58.445 | . 1 61b217d096bc99f7804c7a02 | user2 | 55 | male | 2021-12-09 14:50:58.445 | . 2 61b217d096bc99f7804c7a03 | user3 | 43 | male | 2021-12-09 14:50:58.445 | . 3 61b217d212c824e29e2d3fbc | user4 | 32 | female | 2021-12-09 14:50:58.072 | . 4 61b217d212c824e29e2d3fcb | user5 | 65 | male | 2021-12-09 14:50:58.445 | . DataFrame upsert . def df_upsert(df:DataFrame, collection, keys:[]): def row_query(row, keys ): res = {} for key in keys: res[key] = row.get(key) return res updates = [] df_emplyee.apply( lambda row: updates.append( UpdateOne( row_query(row, keys), {&#39;$set&#39;: row.to_dict(), &quot;$currentDate&quot;:{&quot;lastModifiedAt&quot;: { &quot;$type&quot;: &quot;date&quot; }} }, upsert=True)), axis=1 ) collection.bulk_write(updates) . show_collection(collection) . _id name age sex lastModifiedAt . 0 61b217d096bc99f7804c7a01 | user1 | 25 | male | 2021-12-09 14:50:58.445 | . 1 61b217d096bc99f7804c7a02 | user2 | 55 | male | 2021-12-09 14:50:58.445 | . 2 61b217d096bc99f7804c7a03 | user3 | 43 | male | 2021-12-09 14:50:58.445 | . 3 61b217d212c824e29e2d3fbc | user4 | 32 | female | 2021-12-09 14:50:58.072 | . 4 61b217d212c824e29e2d3fcb | user5 | 65 | male | 2021-12-09 14:50:58.445 | . df_emplyee = df_emplyee.append({&#39;name&#39;:&#39;user6&#39;,&#39;age&#39;: 37, &#39;sex&#39;:&#39;female&#39;},ignore_index=True) df_emplyee . name age sex . 0 user1 | 25 | male | . 1 user2 | 55 | male | . 2 user3 | 43 | male | . 3 user5 | 65 | male | . 4 user6 | 37 | female | . df_upsert(df_emplyee, collection, [&#39;name&#39;]) show_collection(collection) . _id name age sex lastModifiedAt . 0 61b217d096bc99f7804c7a01 | user1 | 25 | male | 2021-12-09 14:51:03.115 | . 1 61b217d096bc99f7804c7a02 | user2 | 55 | male | 2021-12-09 14:51:03.115 | . 2 61b217d096bc99f7804c7a03 | user3 | 43 | male | 2021-12-09 14:51:03.115 | . 3 61b217d212c824e29e2d3fbc | user4 | 32 | female | 2021-12-09 14:50:58.072 | . 4 61b217d212c824e29e2d3fcb | user5 | 65 | male | 2021-12-09 14:51:03.116 | . 5 61b217d712c824e29e2d4061 | user6 | 37 | female | 2021-12-09 14:51:03.116 | .",
            "url": "https://stevenchen521.github.io/blogging/nosql/python/2021/12/09/mogodb_01.html",
            "relUrl": "/nosql/python/2021/12/09/mogodb_01.html",
            "date": " • Dec 9, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://stevenchen521.github.io/blogging/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stevenchen521.github.io/blogging/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}